apply plugin: RepositoryPlugin

class RepositoryPlugin implements Plugin<Gradle> {

    private static String ENTERPRISE_REPOSITORY_URL = System.getenv("CACHE_URL") != null ? System.getenv("CACHE_URL") : "http://localhost:8080/v2/cache/rebuild-default,gradle,gradleplugins/0"

    void apply(Gradle gradle) {
        if (ENTERPRISE_REPOSITORY_URL.startsWith("file:/")) {
            //hermetic build, do nothing
            return
        }
        def fixRepositories = {
            all { ArtifactRepository repo ->
                try {
                    if (!(repo instanceof MavenArtifactRepository) ||
                            repo.url.toString() != ENTERPRISE_REPOSITORY_URL) {
                        if (repo.toString().contains("PluginArtifactRepository") ||
                                repo.url.toString().contains("file:/maven-artifacts") ||
                                repo.toString().contains("MavenLocalArtifactRepository") ||
                                (Boolean.getBoolean("ALLOW_IVY_REPO") && repo.toString().contains("DefaultIvyArtifactRepository"))) {
                            return
                        }
                        println "Repository ${repo.properties['url']} ${repo} removed as it does not match ${ENTERPRISE_REPOSITORY_URL}"
                        remove repo
                    } else if (repo instanceof MavenArtifactRepository) {
                        if (repo.hasProperty('allowInsecureProtocol')) {
                            repo.allowInsecureProtocol = true
                        }
                    }
                } catch (Exception e) {
                    println "Failed to remove ${repo.properties['url']} ${repo}"
                    e.printStackTrace()
                }
            }

            mavenLocal()
            // add the enterprise repository
            maven {
                name "HACBS CACHE"
                url ENTERPRISE_REPOSITORY_URL
            }
        }

        gradle.allprojects(new Action<Project>() {

            @Override
            void execute(Project project) {

                project.repositories fixRepositories
                project.buildscript.repositories fixRepositories
            }
        })
        gradle.settingsEvaluated { settings ->
            settings.pluginManagement.repositories fixRepositories
        }

    }
}
